import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
import whois
# Replace with your bot token
TOKEN = "6618317228:AAHJENt4uNJ6h773Oow1RRdeNTehs8tg4qs"
bot = telebot.TeleBot(TOKEN)

# Dictionary to store conversation states
conversation_states = {}

@bot.message_handler(commands=['start'])
def start(message):

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã \n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–≥–æ—Å—è –Ω–∞ —Ö–∞–∫–∏–Ω–≥–µ, –∏–Ω—Ñ–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∑–ª–æ–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. \n\n"
        "üîí –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã –∞—Ç–∞–∫ –∏ –∑–∞—â–∏—Ç—ã, —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. "
        "–Ø –Ω–µ –ø–æ–æ—â—Ä—è—é –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø—Ä–∞–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–µ—Ç–∏. "
        "–ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        "üîê –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —Ö–∞–∫–∏–Ω–≥ –∏ –≤–∑–ª–æ–º –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. "
        "–í–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. "
        "–û–±—Ä–∞—â–∞–π—Å—è —Å–æ —Å–≤–æ–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –±—É–¥–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ! üíªüõ°Ô∏è"
    )

    with open('./assets/welcome.jpg', 'rb') as photo_file:
        bot.send_photo(message.chat.id, photo_file, caption=welcome_text)


@bot.message_handler(commands=['menu'])
def menu(message):
    chat_id = message.chat.id  # Get the chat ID from the message object
    show_menu(chat_id)


def show_menu(chat_id):
    keyboard = InlineKeyboardMarkup(row_width=1)
    show_tools_button = InlineKeyboardButton(
        text="üõ† –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã üõ†", callback_data="show_tools")
    keyboard.add(show_tools_button)

    message_options = {
        "reply_markup": keyboard,
    }

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", **message_options)


@bot.callback_query_handler(func=lambda query: True)
def handle_callback_query(query):
    chat_id = query.message.chat.id
    message_id = query.message.message_id

    if query.data == "show_tools":
        tools_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

        keyboard = InlineKeyboardMarkup(row_width=1)
        sites_button = InlineKeyboardButton(
            text="–°–∞–π—Ç—ã", callback_data="sites")
        keyboard.add(sites_button)

        bot.edit_message_text(tools_text, chat_id=chat_id,
                              message_id=message_id, reply_markup=keyboard)

    elif query.data == "sites":
        tools_text = "–°–∞–π—Ç—ã"

        keyboard = InlineKeyboardMarkup(row_width=3)
        whois_button = InlineKeyboardButton(
            text="Whois", callback_data="whois")
        keyboard.add(whois_button)

        bot.edit_message_text(tools_text, chat_id=chat_id,
                              message_id=message_id, reply_markup=keyboard)

    elif query.data == "whois":
        # Set conversation state to "waiting_for_user_input"
        conversation_states[chat_id] = "waiting_for_user_input"

        whois_description = (
            "Whois - —ç—Ç–æ —É—Ç–∏–ª–∏—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω. "
            "–û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –¥–æ–º–µ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è.\n\n"
            "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º –≤–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ª–∏–±–æ –µ–≥–æ IP –∞–¥—Ä–µ—Å:"
        )

        bot.send_message(chat_id=chat_id, text=whois_description)

@bot.message_handler(func=lambda message: conversation_states.get(message.chat.id) == "waiting_for_user_input")

def handle_user_input(message):
    chat_id = message.chat.id
    input_text = message.text.strip()

    domen_check = re.compile(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_-]+(\.[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9_-]+)*\.[a-zA-Z–∞-—è–ê-–Ø—ë–Å]{2,5}')
    ip_check = re.compile(r'^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]?)$')

    if domen_check.match(input_text) or ip_check.match(input_text):
        try:
            whois_info = whois.whois(input_text)


            if whois_info.status and isinstance(whois_info.status, list) and whois_info.status[0] == None:
                bot.send_message(chat_id, "No WHOIS data available for the input.")
            else:
                response = "‚úÖ WHOIS data for {}:\n\n".format(input_text)
                for key, value in whois_info.items():
                    response += "{}: {}\n".format(key, value)
                
                bot.send_message(chat_id, response)
        
        except Exception as e:
            bot.send_message(chat_id, "An error occurred. Please try again.")
    else:
        bot.send_message(chat_id, "üëπ Invalid domain or IP resource.")

    conversation_states[chat_id] = None




@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id, "Available commands:\n/start - Start the bot\n/help - Show this help message")


bot.polling()


# def send_response(response):
#         bot.send_message(chat_id=chat_id, text=response)

#     try:
#         whois_data = whois.whois(input_text)
#         if whois_data.status:
#             response = "–°—Ç–∞—Ç—É—Å: {}\n".format(whois_data.status)
#         else:
#             response = "–°—Ç–∞—Ç—É—Å: –ù–µ –Ω–∞–π–¥–µ–Ω\n"
        
#         if whois_data.registrar:
#             response += "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {}\n".format(whois_data.registrar)
        
#         if whois_data.creation_date:
#             response += "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {}\n".format(whois_data.creation_date)
        
#         if whois_data.expiration_date:
#             response += "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {}\n".format(whois_data.expiration_date)
        
#         if whois_data.domain_name:
#             response += "–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è: {}\n".format(whois_data.domain_name)
        
#         if whois_data.org:
#             response += "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {}\n".format(whois_data.org)
        
#         # You can add more attributes based on the WHOIS data you want to display
        
#         send_response(response)
#     except Exception as e:
#         send_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {}".format(str(e)))